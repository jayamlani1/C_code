Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

This is a c++ code.

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        
        int len = nums.size();
        for(int i=0;i<len;i++)
        {
            while(nums[i]!=i+1)
            {
                // This while loop is to copy the element at the current position to it's correct position and swap that elemtn to current position.
                // There are few cases in which we might want to skip swapping the current element.
                // If the element at current posistion is negative or zero, which means it does not matter where it's actual position si? same goes for a number gresater than
                // lenght of the array.
                // Now consider the third and last condition which is if the same number happens to be twice. Again we need to skip the swapping and this is what we are doing with 
                // third consition.
                if(nums[i]<=0 || nums[i]>len || nums[nums[i]-1] == nums[i])
                {
                  break;
                }
                swap(nums[i], nums[nums[i]-1]);
            }
        }
        
        for(int i=0;i<len;i++)
        {
            if(nums[i]!=i+1)
                return i+1;
        }
        return len+1;
        
    }
};
