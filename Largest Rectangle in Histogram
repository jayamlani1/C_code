Question : Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Answer: 

/* The Trick here is to keep adding the index of the array in the stack as long as the height keeps increasing.
 * When height starts decreasing, calculate the total for all the bars already in the stack.
 * This is done by starting a while loop and checking as long as the current value is less than the entry in the stack we keep popping them out and calculating the current total
 *
 */
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int len = heights.size();
        int current_total = 0; // This variable is used for storing temp total
        int max_total = 0; // Used for storing max total
        int st_val =0;
        stack<int> st_ind;
        int i;
        for(i =0; i<len;i++)
        {
            while(!st_ind.empty() && heights[st_ind.top()] >= heights[i])
            {
                st_val = st_ind.top();
                st_ind.pop();
                current_total = heights[st_val] * (st_ind.empty() ? i : i - st_ind.top() - 1);
                max_total = max(max_total, current_total);
            }
            st_ind.push(i);
        }
        
        // This while loop is important as for the case where the histogram's height keep increasing or there are many small bars left at the beginning or in the middle of histogram.
        while(!st_ind.empty())
        {
            st_val = st_ind.top();
            st_ind.pop();
            current_total = heights[st_val] * (st_ind.empty() ? len : len - st_ind.top() - 1);
            max_total = max(max_total, current_total);
        }
        return max_total;
    }
};
